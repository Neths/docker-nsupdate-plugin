#!/usr/bin/env bash

config_file="/config.json"

usage() {
cat <<DATA
Usage: docker-nsupdate-plugin [CONFIG_FILEPATH]

CONFIG_FILEPATH:
  path to json config file (/config.json)

DATA
exit 0
}

while (( $# > 0 )); do
  case $1 in
    *)
      config_file=$1
  esac
  shift
done

build_request() {
  request="nsupdate "

  if [ ! -z "$4" ]; then
    request="$request -k $4 "
  fi

  request="$request server $3"

  if [ "$1" ]; then
    request="$request update delete $2 $6"
  else
    request="$request update add $2 $7 $6 $5"
  fi

  request="$request send"

  printf "%s" "$request"
}

normalization() {
  printf "%s" "${1//_/-}"
}

fields=(
  "{{.Name}}"
  "{{ index .Config.Labels \"nsupdate.enable\"}}"
  "{{ index .Config.Labels \"nsupdate.domains\"}}"
  "{{ index .Config.Labels \"nsupdate.target\"}}"
  "{{ index .Config.Labels \"nsupdate.entrytype\"}}"
  "{{ index .Config.Labels \"nsupdate.ttl\"}}"
)
format=$(IFS="|"; echo "${fields[*]}")

handler() {
  local filter=$1 event=$2 container=$3 info rawdomains domains target entrytype ttl
  shift

  [[ $filter = "container" ]] || return 0

  case $event in
    start | exists | die)
      IFS="|" read -ra info < <(docker inspect -f "$format" "$container")
      name="$(normalization "${info[0]:1}")"
      rawdomains="${info[2]}"
      target="${info[3]}"
      entrytype="${info[4]}"
      ttl="${info[5]}"

      IFS=',' read -ra domains < "$rawdomains"

      if [ "${info[1]}" ]
      then
        for d in $domains; do
          config=( $(jq --arg test "$d" -r '.[] | select(.basehost | inside($test)) | .[]' "$config_file") )

          case $event in
            start | exists)
              echo "update CONTAINER: $name $d $target"
              echo build_request false "$d" "${config[1]}" "${config[2]}" "$target" "$entrytype" "$ttl"
              #cat < build_request "$dns"
              ;;
            die)
              echo "delete CONTAINER: $name $d $target"
              echo build_request true "$d" "${config[1]}" "${config[2]}" "$target" "$entrytype"
              #cat < build_request "$dns" true
              ;;
          esac
        done
      else
        echo "disabled nsupdate: $name"
        exit 0  
      fi
  esac
}
