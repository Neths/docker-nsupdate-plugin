#!/usr/bin/env bash

dns_server=""
config_file="/config.json"

usage() {
cat <<DATA
Usage: docker-nsupdate-plugin [CONFIG_FILEPATH]

CONFIG_FILEPATH:
  path to json config file (/config.json)

DATA
exit 0
}

while (( $# > 0 )); do
  case $1 in
    *)
      config_file=$1
  esac
  shift
done

build_request() {
  request = "nsupdate "

  if [ ! -z ${1[2]} ]; then
    request = "$request -k ${1[2]} "
  fi

  request = "$request server ${1[1]}"

  if [ $2 ]; then
    request = "$request update delete ${1[0]} ${1[4]}"
  else
    request = "$request update add ${1[0]} ${1[5]} ${1[4]} ${1[3]}"
  if

  request = "$request send"

  printf "%s" "$request"
}

normalization() {
  printf "%s" "${1//_/-}"
}

fields=(
  "{{.Name}}"
  "{{ index .Config.Labels \"nsupdate.enable\"}}"
  "{{ index .Config.Labels \"nsupdate.domains\"}}"
  "{{ index .Config.Labels \"nsupdate.target\"}}"
  "{{ index .Config.Labels \"nsupdate.entrytype\"}}"
  "{{ index .Config.Labels \"nsupdate.ttl\"}}"
)
format=$(IFS="|"; echo "${fields[*]}")

handler() {
  local filter=$1 event=$2 container=$3 info active rawdomains domains target entrytype ttl
  shift

  [[ $filter = "container" ]] || return 0

  case $event in
    start | exists | die)
      IFS="|" read -ra info < <(docker inspect -f "$format" "$container")
      name="$(normalization "${info[0]:1}")"
      active="${info[1]}"
      rawdomains="${info[2]}"
      target="${info[3]}"
      entrytype="${info[4]}"
      ttl="${info[5]}"

      IFS=',' read -ra domains < "$rawdomains"

      if [ $info[1] ]
      then
        for d in ${domains}; do
          dns[0]=$d
          config=( $(jq --arg test $d -r '.[] | select(.basehost | inside($test)) | .[]' config.json) )
          dns[1]=config[1]
          dns[2]=config[2]
          dns[3]=target
          dns[4]=entrytype
          dns[5]=ttl
        done
      else
        echo "disabled nsupdate: $name"
        exit 0  
      fi

      case $event in
        start | exists)
          echo "update CONTAINER: $name ${dns[0]} ${dns[3]}"
          echo build_request "$dns"
          #cat < build_request "$dns"
          ;;
        die)
          echo "delete CONTAINER: $name ${dns[0]} ${dns[3]}"
          echo build_request "$dns" true
          #cat < build_request "$dns" true
          ;;
      esac
  esac
}
